{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Size of the VM in the VM Scale Set.Please refer this link for more available Vmsize. https://docs.microsoft.com/en-us/azure/virtual-machines/virtual-machines-windows-sizes-memory"
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "16.04-LTS",
      "allowedValues": [
        "14.04.4-LTS",
        "16.04-LTS"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values are: 16.04-LTS, 14.04.4-LTS."
      }
    },
    "vmsName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z][a-z0-9]$"
      },
      "maxLength": 61
    },
    "instanceCount": {
      "type": "string",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs.Username should not like admin, administrator, root."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs.password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: Contains an uppercase character, Contains a lowercase character, Contains a numeric digit Contains a special character."
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "CIDR Address for provisioning virtualNetworks. please ensure that the CIDR is not already existing."
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "CIDR Address for provisioning Subnet"
      }
    }
  },
  "variables": {
    "namingInfix": "[toLower(substring(concat(parameters('vmsName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longNamingInfix": "[toLower(parameters('vmsName'))]",
    "virtualNetworkName": "[concat(variables('longNamingInfix'), 'vnet')]",
    "publicIPAddressName": "[concat(variables('longNamingInfix'), 'pip')]",
    "subnetName": "[concat(variables('longNamingInfix'), 'subnet')]",
    "loadBalancerName": "[concat(variables('longNamingInfix'), 'lb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "natPoolName": "[concat(variables('longNamingInfix'), 'natpool')]",
    "probePoolName": "[concat(variables('longNamingInfix'),'probepool')]",
    "bePoolName": "[concat(variables('longNamingInfix'), 'bepool')]",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "nicName": "[concat(variables('longNamingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('longNamingInfix'), 'ipconfig')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "osType": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "[parameters('ubuntuOSVersion')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-04-01",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "autoscaleName": "[concat(variables('longNamingInfix'), 'autoscale')]",
    "VSGName": "[concat(variables('longNamingInfix'), 'autoscalesg')]"
  },
  "resources": [{
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('VSGName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NSG-NetworkAccess"
      },
      "properties": {
        "securityRules": [{
            "name": "allow-inbound",
            "properties": {
              "description": "Allow inbound http access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow-Outbound",
            "properties": {
              "description": "Allow inbound http access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 1001,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('VSGName'))]"
      ],
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [{
          "name": "[variables('subnetName')]",
          "properties": {
            "addressPrefix": "[parameters('subnetPrefix')]",
            "networkSecurityGroup": {
              "id": "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('VSGName'))]"
            }
          }
        }]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('longNamingInfix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [{
          "name": "LoadBalancerFrontEnd",
          "properties": {
            "publicIPAddress": {
              "id": "[variables('publicIPAddressID')]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "[variables('bePoolName')]"
        }],
        "inboundNatPools": [{
          "name": "[variables('natPoolName')]",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[variables('frontEndIPConfigID')]"
            },
            "protocol": "tcp",
            "frontendPortRangeStart": "[variables('natStartPort')]",
            "frontendPortRangeEnd": "[variables('natEndPort')]",
            "backendPort": "[variables('natBackendPort')]"
          }
        }],
        "probes": [{
          "properties": {
            "protocol": "Tcp",
            "port": 80,
            "intervalInSeconds": 15,
            "numberOfProbes": 2
          },
          "name": "lbprobe"
        }],
        "loadBalancingRules": [{
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
            },
            "backendAddressPool": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('bePoolName'))]"
            },
            "probe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/lbprobe')]"
            },
            "protocol": "Tcp",
            "frontendPort": 80,
            "backendPort": 80,
            "idleTimeoutInMinutes": 15
          },
          "Name": "[variables('namingInfix')]"
        }]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('namingInfix')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [{
              "name": "[variables('nicName')]",
              "properties": {
                "primary": "true",
                "ipConfigurations": [{
                  "name": "[variables('ipConfigName')]",
                  "properties": {
                    "subnet": {
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                    },
                    "loadBalancerBackendAddressPools": [{
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                    }],
                    "loadBalancerInboundNatPools": [{
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                    }]
                  }
                }]
              }
            }]
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "[variables('insightsApiVersion')]",
      "name": "[variables('autoscaleName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]"
      ],
      "properties": {
        "name": "[variables('autoscaleName')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
        "enabled": true,
        "profiles": [{
          "name": "Profile1",
          "capacity": {
            "minimum": "1",
            "maximum": "10",
            "default": "1"
          },
          "rules": [{
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "GreaterThan",
                "threshold": 60.0
              },
              "scaleAction": {
                "direction": "Increase",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT1M"
              }
            },
            {
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "LessThan",
                "threshold": 30.0
              },
              "scaleAction": {
                "direction": "Decrease",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT5M"
              }
            }
          ]
        }]
      }
    }
  ],
    "outputs": {
        "host_ip": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
        }
    }
}
