{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dnsName": {
      "type": "string",
      "metadata": {
        "description": "Dnsname of that LBCluster.Should be unique across the ResourceGroup."
      }
    },
    "vmUserName": {
      "type": "string",
      "metadata": {
        "description": "Username of that virtual machine to connect via ssh. Username should not like admin, administrator, root."
      }
    },
    "vmPassword": {
      "type": "securestring",
      "metadata": {
        "description": "password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: Contains an uppercase character, Contains a lowercase character, Contains a numeric digit Contains a special character."
      }
    },
    "mysqlRootPassword": {
      "type": "securestring",
      "metadata": {
        "description": "mysql root user password. Other than single and double quotes all special, numeric characters are allowed."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "metadata": {
        "description": "size for the VMs. Please refer this link for more available Vmsize. https://docs.microsoft.com/en-us/azure/virtual-machines/virtual-machines-windows-sizes-memory"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "OpenLogic",
      "allowedValues": [
        "OpenLogic",
        "Canonical"
      ],
      "metadata": {
        "description": "publisher for the VM OS image. OpenLogic refers Centos platform and Canonical refers Ubuntu platform."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "CentOS",
      "allowedValues": [
        "CentOS",
        "UbuntuServer"
      ],
      "metadata": {
        "description": "VM OS name. Centos for OpenLogic publisher and UbuntuServer for Canonical publisher."
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "6.6",
      "allowedValues": [
        "6.5",
        "6.6",
        "14.04.5-LTS"
      ],
      "metadata": {
        "description": "Please select 6.5 and 6.6 if you select CentOS for image offer else select 14.04.5-LTS"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "CIDR Address for provisioning VirtualNetwork. Ensure that the CIDR is not already existing"
      }
    },
    "dbSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "CIDR Address for provisioning Subnet"
      }
    },
    "dbSubnetStartAddress": {
      "type": "string",
      "defaultValue": "10.0.1.4",
      "metadata": {
        "description": "Starting IP Address to provision the VM.IP Address of the VM as per the subnet configured"
      }
    }
  },
  "variables": {
    "templateAPIVersion": "2015-01-01",
    "resourceAPIVersion": "2015-06-15",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id),'storage')]",
    "customScriptCommandToExecute": "bash azuremysql.sh",
    "mysqlReplicationPassword": "P@ssw0rd",
    "mysqlProbePassword": "P@ssw0rd",
    "virtualNetworkName": "[concat(parameters('dnsName'), 'vnet')]",
    "mysqlFrontEndPort0": 3306,
    "mysqlFrontEndPort1": 3307,
    "sshNatRuleFrontEndPort0": 64001,
    "sshNatRuleFrontEndPort1": 64002,
    "mysqlProbePort0": 9200,
    "mysqlProbePort1": 9201,
    "artifactsPath": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/mysql-replication",
    "mysqlScriptPath": "https://s3.amazonaws.com/azuremysqlcluster",
    "dbSubnetName": "[concat(parameters('dnsName'), 'dbSubnet')]",
    "vnetNewOrExisting": "new",
    "nodeCount": 2,
    "storageAccountType": "Standard_LRS",
    "lbPublicIPName": "[concat(parameters('dnsName'), 'pip')]",
    "lbPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPName'))]",
    "lbName": "[concat(parameters('dnsName'), '-lb')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "ilbBackendAddressPoolName": "[concat(parameters('dnsName'), '-ilbBackendPool')]",
    "ilbBackendAddressPoolID": "[concat(variables('lbID'),'/backendAddressPools/', variables('ilbBackendAddressPoolName'))]",
    "ilbRuleName": "[concat(parameters('dnsName'), '-ilbRule')]",
    "ilbRuleID": "[concat(variables('lbID'),'/loadBalancingRules/',variables('ilbRuleName'))]",
    "sshIPConfigName": "[concat(parameters('dnsName'), '-sshIPCfg')]",
    "sshIPConfig": "[concat(variables('lbID'),'/frontendIPConfigurations/',variables('sshIPConfigName'))]",
    "nicName": "[concat(parameters('dnsName'), '-nic')]",
    "availabilitySetName": "[concat(parameters('dnsName'), '-set')]",
    "customScriptFilePath": "[concat(variables('mysqlScriptPath'), '/azuremysql.sh')]",
    "mysqlConfigFilePath": "[concat(variables('artifactsPath'), '/my.cnf.template')]",
    "singleQuote": "",
    "virtualNetworkSetupURL": "[concat(variables('artifactsPath'),'/vnet-',variables('vnetNewOrExisting'),'.json')]",
    "sa": "[parameters('dbSubnetStartAddress')]",
    "ipOctet01": "[concat(split(variables('sa'), '.')[0], '.', split(variables('sa'), '.')[1], '.')]",
    "ipOctet2": "[int(split(variables('sa'), '.')[2])]",
    "ipOctet3": "[int(split(variables('sa'), '.')[3])]"
  },
  "resources": [{
      "name": "SettingUpVirtualNetwork",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('templateAPIVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('virtualNetworkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "dbSubnetName": {
            "value": "[variables('dbSubnetName')]"
          },
          "dbSubnetAddressPrefix": {
            "value": "[parameters('dbSubnetAddressPrefix')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPublicIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsName')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'SettingUpVirtualNetwork')]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [{
          "name": "[concat('ipconfig', copyIndex())]",
          "properties": {
            "privateIPAllocationMethod": "Static",
            "privateIPAddress": "[concat(variables('ipOctet01'), add(variables('ipOctet2'), div(copyIndex(variables('ipOctet3')), 255)), '.', mod(copyIndex(variables('ipOctet3')), 255))]",
            "subnet": {
              "id": "[reference('Microsoft.Resources/deployments/SettingUpVirtualNetwork', variables('templateAPIVersion')).outputs.dbSubnetRef.value]"
            },
            "loadBalancerBackendAddressPools": [{
              "id": "[variables('ilbBackendAddressPoolID')]"
            }],
            "loadBalancerInboundNatRules": [{
                "id": "[concat(variables('lbID'),'/inboundNatRules/',parameters('dnsName'), 'NatRule', copyIndex())]"
              },
              {
                "id": "[concat(variables('lbID'),'/inboundNatRules/',parameters('dnsName'), 'ProbeNatRule', copyIndex())]"
              },
              {
                "id": "[concat(variables('lbID'),'/inboundNatRules/',parameters('dnsName'), 'MySQLNatRule', copyIndex())]"
              }
            ]
          }
        }]
      }
    },
    {
      "name": "[concat(parameters('dnsName'), copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoop",
        "count": "[variables('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('dnsName'), copyIndex())]",
          "adminUsername": "[parameters('vmUserName')]",
          "adminPassword": "[parameters('vmPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', parameters('dnsName'), copyIndex(), 'osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [{
              "name": "datadisk1",
              "diskSizeGB": "1000",
              "lun": 0,
              "vhd": {
                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', parameters('dnsName'), copyIndex(), 'dataDisk1.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "datadisk2",
              "diskSizeGB": "1000",
              "lun": 1,
              "vhd": {
                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', parameters('dnsName'), copyIndex(), 'dataDisk2.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',variables('nicName')), copyIndex())]"
          }]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('dnsName'), copyIndex(), '/setupMySQL')]",
      "apiVersion": "[variables('resourceAPIVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extLoop",
        "count": "[variables('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('dnsName'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('customScriptFilePath')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('customScriptCommandToExecute'), ' ', copyIndex(1), ' ', variables('ipOctet01'), add(variables('ipOctet2'), div(copyIndex(variables('ipOctet3')), 255)), '.', mod(copyIndex(variables('ipOctet3')), 255), ' ', variables('mysqlConfigFilePath'), ' ', variables('singleQuote'), variables('mysqlReplicationPassword'), variables('singleQuote'), ' ', variables('singleQuote'), parameters('mysqlRootPassword'), variables('singleQuote'), ' ', variables('singleQuote'), variables('mysqlProbePassword'), variables('singleQuote'), ' ', parameters('dbSubnetStartAddress'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('resourceAPIVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [{
          "name": "[variables('sshIPConfigName')]",
          "properties": {
            "publicIPAddress": {
              "id": "[variables('lbPublicIPRef')]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "[variables('ilbBackendAddressPoolName')]"
        }],
        "inboundNatRules": [{
            "name": "[concat(parameters('dnsName'),'NatRule0')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('sshNatRuleFrontEndPort0')]",
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat(parameters('dnsName'),'NatRule1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('sshNatRuleFrontEndPort1')]",
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat(parameters('dnsName'),'MySQLNatRule0')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('mysqlFrontEndPort0')]",
              "backendPort": 3306,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat(parameters('dnsName'),'MySQLNatRule1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('mysqlFrontEndPort1')]",
              "backendPort": 3306,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat(parameters('dnsName'),'ProbeNatRule0')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('mysqlProbePort0')]",
              "backendPort": 9200,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[concat(parameters('dnsName'),'ProbeNatRule1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('sshIPConfig')]"
              },
              "protocol": "tcp",
              "frontendPort": "[variables('mysqlProbePort1')]",
              "backendPort": 9200,
              "enableFloatingIP": false
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPName')),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn]",
      "type": "string"
    },
    "ipaddress": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPName')),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).ipAddress]",
      "type": "string"
    }
  }
}
